name: Build, Test, and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_NUMBER: ${{ github.run_number }}
  VERSION_NAME: 1.0.${{ github.run_number }}

permissions:
  contents: write

jobs:
  build:
    name: IntelliJ Plugin Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Gradle Build Action
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-overwrite-existing: true

      - name: Set Environment Variables
        run: |
          echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
          echo "VERSION_NAME=1.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test

      - name: Build Plugin
        run: ./gradlew buildPlugin

      - name: Get Plugin Version
        id: plugin_version
        run: echo "VERSION=${{ env.VERSION_NAME }}" >> $GITHUB_ENV

      - name: Get Commit Messages
        id: get_commits
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Get commit messages since last tag, or last 10 commits if no tag exists
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # No previous tag found, get last 10 commits
            COMMIT_LOG=$(git log -10 --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMIT_LOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          # Escape newlines for GitHub Actions
          COMMIT_LOG="${COMMIT_LOG//'%'/'%25'}"
          COMMIT_LOG="${COMMIT_LOG//$'\n'/'%0A'}"
          COMMIT_LOG="${COMMIT_LOG//$'\r'/'%0D'}"
          # Set output
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION_NAME }}
          name: Release v${{ env.VERSION_NAME }}
          body: |
            Automated release for build ${{ env.VERSION_NAME }}

            ## Changes in this release:
            ${{ env.COMMIT_LOG }}
          draft: false
          prerelease: false
          files: build/distributions/*.zip
